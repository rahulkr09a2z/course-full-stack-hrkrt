/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const fs = require("fs");
const path = require("path");

const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

const fileName = "todos.json";
const filePath = path.join(__dirname, "./files", fileName);

function writeErrHandler(err) {
  if (err) console.log("File Write Error", err);
}
function unknownErrHandler(err) {
  if (err) console.log("Something Went Wrong", err);
}

function fileWriteHandler(newData) {
  fs.writeFile(
    filePath,
    JSON.stringify(newData),
    { encoding: "utf8" },
    writeErrHandler
  );
}

const getData = async () => {
  return new Promise((resolve) => {
    fs.readFile(filePath, { encoding: "utf8" }, (err, data) => {
      if (err) {
        if (err.code === "ENOENT") {
          const emptyData = [];
          fileWriteHandler(emptyData);
          console.log("File created successfully.");
          return emptyData;
        }
      }
      resolve(JSON.parse(data)||[]);
    });
  });
};

const getAllTodosData = (req, res) => {
  getData()
    .then((data) => {

      return res.send(data);
    })
    .catch(unknownErrHandler);
};

const getTodoData = (req, res) => {
  const todoId = req.params.todoId;
  getData()
    .then((data) => {
      const elIndex = data.findIndex((item) => item.id === todoId);
      if (todoId > -1) {
        return res.json(data[elIndex]);
      }
      return res.status(404).send("Not Found");
    })
    .catch(unknownErrHandler);
};

const addTodoHandler = (req, res) => {
  const { title, description } = req.body;
  getData()
    .then((dbData) => {
      let tempData = [...dbData];
      let newId = Date.now().toString();
      tempData.push({
        id: newId,
        title,
        description,
      });
      res.status(201).json({ id: newId });
      fileWriteHandler(tempData);
    })
    .catch((err)=>{
      unknownErrHandler(err)
    });
};
const updateTodoHandler = (req, res) => {
  const { title, description } = req.body;
  let targetTodoItemId = req.params.todoId;
  getData()
    .then((dbData) => {
      let tempData = [...dbData];
      let targetIndex = tempData.findIndex(
        (item) => item.id === targetTodoItemId
      );
      if (targetIndex > -1) {
        tempData[targetIndex] = {
          id: tempData[targetIndex].id,
          title,
          description,
        };
        fileWriteHandler(tempData);
        res.send();
      } else {
        res.status(404).send("Not Found");
      }
    })
    .catch(unknownErrHandler);
};

const deleteTodoHandler = (req, res) => {
  let targetTodoItemId = req.params.todoId;

  getData()
    .then((dbData) => {
      let tempData = [...dbData];
      let targetIndex = tempData.findIndex(
        (item) => item.id === targetTodoItemId
      );
      if (targetIndex > -1) {
        tempData.splice(targetIndex, 1);
        fileWriteHandler(tempData);
        res.send();
      } else {
        res.status(404).send("Not Found");
      }
    })
    .catch(unknownErrHandler);
};

app.get("/todos", getAllTodosData);
app.get("/todos/:todoId", getTodoData);
app.post("/todos", addTodoHandler);
app.put("/todos/:todoId", updateTodoHandler);
app.delete("/todos/:todoId", deleteTodoHandler);

app.all("*", (req, res) => {
  res.status(404).send("Route not found");
});

module.exports = app;
